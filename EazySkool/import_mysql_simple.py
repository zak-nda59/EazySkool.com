#!/usr/bin/env python3
"""
Script simplifi√© pour importer les tables MySQL
"""

import mysql.connector
from mysql.connector import Error
import os

def create_database_and_tables():
    """Cr√©e la base de donn√©es et les tables"""
    print("üóÑÔ∏è Cr√©ation de la base de donn√©es EazySkool")
    print("=" * 50)
    
    try:
        # Connexion √† MySQL
        print("üîå Connexion √† MySQL...")
        connection = mysql.connector.connect(
            host='localhost',
            user='root',
            password='',
            port=3306
        )
        
        if connection.is_connected():
            print("‚úÖ Connexion MySQL r√©ussie!")
            cursor = connection.cursor()
            
            # Cr√©er la base de donn√©es
            print("üìä Cr√©ation de la base de donn√©es...")
            cursor.execute("CREATE DATABASE IF NOT EXISTS eazyskool CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci")
            cursor.execute("USE eazyskool")
            print("‚úÖ Base de donn√©es 'eazyskool' cr√©√©e")
            
            # Cr√©er les tables une par une
            print("üèóÔ∏è Cr√©ation des tables...")
            
            # Table users
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    email VARCHAR(255) UNIQUE NOT NULL,
                    password_hash VARCHAR(255) NOT NULL,
                    first_name VARCHAR(100),
                    last_name VARCHAR(100),
                    city VARCHAR(100),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
                )
            """)
            print("‚úÖ Table 'users' cr√©√©e")
            
            # Table school_types
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS school_types (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    name VARCHAR(100) NOT NULL,
                    description TEXT
                )
            """)
            print("‚úÖ Table 'school_types' cr√©√©e")
            
            # Table cities
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS cities (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    name VARCHAR(100) NOT NULL,
                    region VARCHAR(100)
                )
            """)
            print("‚úÖ Table 'cities' cr√©√©e")
            
            # Table schools
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS schools (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    name VARCHAR(255) NOT NULL,
                    description TEXT,
                    address TEXT,
                    phone VARCHAR(20),
                    email VARCHAR(255),
                    website VARCHAR(255),
                    city_id INT,
                    school_type_id INT,
                    rating DECIMAL(3,2) DEFAULT 0.00,
                    price_range VARCHAR(50),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    FOREIGN KEY (city_id) REFERENCES cities(id),
                    FOREIGN KEY (school_type_id) REFERENCES school_types(id)
                )
            """)
            print("‚úÖ Table 'schools' cr√©√©e")
            
            # Table school_images
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS school_images (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    school_id INT,
                    image_url VARCHAR(500) NOT NULL,
                    is_primary BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (school_id) REFERENCES schools(id) ON DELETE CASCADE
                )
            """)
            print("‚úÖ Table 'school_images' cr√©√©e")
            
            # Table specializations
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS specializations (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    name VARCHAR(100) NOT NULL,
                    description TEXT
                )
            """)
            print("‚úÖ Table 'specializations' cr√©√©e")
            
            # Table school_specializations
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS school_specializations (
                    school_id INT,
                    specialization_id INT,
                    PRIMARY KEY (school_id, specialization_id),
                    FOREIGN KEY (school_id) REFERENCES schools(id) ON DELETE CASCADE,
                    FOREIGN KEY (specialization_id) REFERENCES specializations(id) ON DELETE CASCADE
                )
            """)
            print("‚úÖ Table 'school_specializations' cr√©√©e")
            
            # Table reviews
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS reviews (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    school_id INT,
                    user_id INT,
                    rating INT,
                    comment TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (school_id) REFERENCES schools(id) ON DELETE CASCADE,
                    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
                )
            """)
            print("‚úÖ Table 'reviews' cr√©√©e")
            
            # Table favorites
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS favorites (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    user_id INT,
                    school_id INT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                    FOREIGN KEY (school_id) REFERENCES schools(id) ON DELETE CASCADE,
                    UNIQUE KEY unique_user_school (user_id, school_id)
                )
            """)
            print("‚úÖ Table 'favorites' cr√©√©e")
            
            # Table events
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS events (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    title VARCHAR(255) NOT NULL,
                    description TEXT,
                    event_date DATE,
                    event_time TIME,
                    location VARCHAR(255),
                    school_id INT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (school_id) REFERENCES schools(id) ON DELETE CASCADE
                )
            """)
            print("‚úÖ Table 'events' cr√©√©e")
            
            # Ins√©rer les donn√©es
            print("üìù Insertion des donn√©es...")
            
            # Types d'√©coles
            cursor.execute("""
                INSERT IGNORE INTO school_types (name, description) VALUES
                ('√âcole de commerce', 'Formation en management et commerce'),
                ('√âcole d\'ing√©nieur', 'Formation en ing√©nierie et sciences'),
                ('√âcole d\'art', 'Formation en arts et design'),
                ('√âcole de communication', 'Formation en communication et m√©dias'),
                ('√âcole de sant√©', 'Formation en sant√© et param√©dical'),
                ('√âcole de droit', 'Formation en droit et sciences juridiques')
            """)
            print("‚úÖ Types d'√©coles ins√©r√©s")
            
            # Villes
            cursor.execute("""
                INSERT IGNORE INTO cities (name, region) VALUES
                ('Strasbourg', 'Grand Est'),
                ('Nancy', 'Grand Est'),
                ('Metz', 'Grand Est'),
                ('Reims', 'Grand Est'),
                ('Troyes', 'Grand Est'),
                ('Ch√¢lons-en-Champagne', 'Grand Est')
            """)
            print("‚úÖ Villes ins√©r√©es")
            
            # Sp√©cialisations
            cursor.execute("""
                INSERT IGNORE INTO specializations (name, description) VALUES
                ('Marketing Digital', 'Formation en marketing digital et e-commerce'),
                ('Intelligence Artificielle', 'Formation en IA et machine learning'),
                ('Finance', 'Formation en finance et gestion'),
                ('Informatique', 'Formation en d√©veloppement et syst√®mes'),
                ('Design Graphique', 'Formation en design et cr√©ation'),
                ('Communication', 'Formation en communication et m√©dias'),
                ('Sant√©', 'Formation en sant√© et bien-√™tre'),
                ('Droit', 'Formation en droit et l√©gislation')
            """)
            print("‚úÖ Sp√©cialisations ins√©r√©es")
            
            # √âcoles
            cursor.execute("""
                INSERT IGNORE INTO schools (name, description, address, phone, email, website, city_id, school_type_id, rating, price_range) VALUES
                ('EM Strasbourg', '√âcole de management de Strasbourg', '61 Avenue de la For√™t-Noire, 67085 Strasbourg', '03 88 41 77 77', 'contact@em-strasbourg.eu', 'https://www.em-strasbourg.eu', 1, 1, 4.5, '8000-12000‚Ç¨'),
                ('INSA Strasbourg', 'Institut National des Sciences Appliqu√©es', '24 Boulevard de la Victoire, 67084 Strasbourg', '03 88 14 47 00', 'contact@insa-strasbourg.fr', 'https://www.insa-strasbourg.fr', 1, 2, 4.3, '600‚Ç¨'),
                ('ESAD Strasbourg', '√âcole Sup√©rieure d\'Art Dramatique', '7 Rue de l\'Acad√©mie, 67000 Strasbourg', '03 88 25 69 74', 'contact@esad-stg.fr', 'https://www.esad-stg.fr', 1, 3, 4.1, '400‚Ç¨'),
                ('ICN Business School', '√âcole de commerce √† Nancy', '86 Rue du Sergent Blandan, 54003 Nancy', '03 54 50 25 00', 'contact@icn-artem.com', 'https://www.icn-artem.com', 2, 1, 4.2, '9000-11000‚Ç¨'),
                ('CentraleSup√©lec Metz', '√âcole d\'ing√©nieur', '2 Rue √âdouard Belin, 57070 Metz', '03 87 34 69 00', 'contact@centralesupelec.fr', 'https://www.centralesupelec.fr', 3, 2, 4.4, '600‚Ç¨'),
                ('NEOMA Business School', '√âcole de commerce √† Reims', '59 Rue Pierre Taittinger, 51100 Reims', '03 26 77 46 00', 'contact@neoma-bs.fr', 'https://www.neoma-bs.fr', 4, 1, 4.0, '8500-11500‚Ç¨'),
                ('UTT Troyes', 'Universit√© de Technologie de Troyes', '12 Rue Marie Curie, 10004 Troyes', '03 25 71 76 00', 'contact@utt.fr', 'https://www.utt.fr', 5, 2, 4.2, '600‚Ç¨'),
                ('ESC Troyes', '√âcole Sup√©rieure de Commerce', '217 Avenue Pierre Brossolette, 10000 Troyes', '03 25 49 49 49', 'contact@esctroyes.fr', 'https://www.esctroyes.fr', 5, 1, 3.9, '7500-9500‚Ç¨')
            """)
            print("‚úÖ √âcoles ins√©r√©es")
            
            # Images d'√©coles
            cursor.execute("""
                INSERT IGNORE INTO school_images (school_id, image_url, is_primary) VALUES
                (1, 'https://example.com/em-strasbourg.jpg', TRUE),
                (2, 'https://example.com/insa-strasbourg.jpg', TRUE),
                (3, 'https://example.com/esad-strasbourg.jpg', TRUE),
                (4, 'https://example.com/icn-nancy.jpg', TRUE),
                (5, 'https://example.com/centralesupelec-metz.jpg', TRUE),
                (6, 'https://example.com/neoma-reims.jpg', TRUE),
                (7, 'https://example.com/utt-troyes.jpg', TRUE),
                (8, 'https://example.com/esc-troyes.jpg', TRUE)
            """)
            print("‚úÖ Images d'√©coles ins√©r√©es")
            
            # Liaisons √©coles-sp√©cialisations
            cursor.execute("""
                INSERT IGNORE INTO school_specializations (school_id, specialization_id) VALUES
                (1, 1), (1, 3), (2, 4), (2, 2), (3, 5), (3, 6), (4, 1), (4, 3),
                (5, 4), (5, 2), (6, 1), (6, 3), (7, 4), (7, 2), (8, 1), (8, 3)
            """)
            print("‚úÖ Liaisons √©coles-sp√©cialisations ins√©r√©es")
            
            # √âv√©nements
            cursor.execute("""
                INSERT IGNORE INTO events (title, description, event_date, event_time, location, school_id) VALUES
                ('Journ√©e Portes Ouvertes', 'D√©couvrez notre √©cole et nos formations', '2024-03-15', '09:00:00', 'Campus principal', 1),
                ('Conf√©rence IA', 'L\'intelligence artificielle dans l\'√©ducation', '2024-03-20', '14:00:00', 'Amphith√©√¢tre A', 2),
                ('Workshop Design', 'Atelier de design graphique', '2024-03-25', '10:00:00', 'Atelier cr√©atif', 3),
                ('Salon des m√©tiers', 'Rencontrez les professionnels', '2024-04-10', '13:00:00', 'Hall d\'exposition', 4)
            """)
            print("‚úÖ √âv√©nements ins√©r√©s")
            
            # Valider les changements
            connection.commit()
            
            # V√©rifier les donn√©es
            cursor.execute("SELECT COUNT(*) FROM schools")
            school_count = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM cities")
            city_count = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM school_types")
            type_count = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM specializations")
            spec_count = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM events")
            event_count = cursor.fetchone()[0]
            
            print(f"\nüìä Statistiques:")
            print(f"   üìö √âcoles: {school_count}")
            print(f"   üèôÔ∏è Villes: {city_count}")
            print(f"   üéì Types d'√©coles: {type_count}")
            print(f"   üéØ Sp√©cialisations: {spec_count}")
            print(f"   üìÖ √âv√©nements: {event_count}")
            
            cursor.close()
            connection.close()
            
            print("\nüéâ Base de donn√©es cr√©√©e avec succ√®s!")
            print("üåê Acc√®s phpMyAdmin: http://localhost/phpmyadmin")
            print("üìä Base de donn√©es: eazyskool")
            
            return True
            
    except Error as e:
        print(f"‚ùå Erreur MySQL: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

if __name__ == "__main__":
    print("üéì EazySkool - Cr√©ation de la base de donn√©es MySQL")
    print("=" * 50)
    
    if create_database_and_tables():
        print("\nüìã Prochaines √©tapes:")
        print("1. D√©marrer l'API: python mysql_api_server.py")
        print("2. Tester l'API: python test_mysql_api.py")
        print("3. Ouvrir phpMyAdmin: http://localhost/phpmyadmin")
        print("4. Acc√©der √† l'interface: index.html")
    else:
        print("\n‚ùå √âchec de la cr√©ation")
        print("üí° V√©rifiez que WampServer est d√©marr√© et MySQL fonctionne") 