#!/usr/bin/env python3
"""
Script pour importer automatiquement les tables MySQL pour EazySkool
"""

import mysql.connector
from mysql.connector import Error
import os

def import_mysql_tables():
    """Importe les tables MySQL depuis le fichier SQL"""
    print("üóÑÔ∏è Import des tables MySQL pour EazySkool")
    print("=" * 50)
    
    # Param√®tres de connexion
    host = 'localhost'
    user = 'root'
    password = ''
    database = 'eazyskool'
    port = 3306
    
    try:
        # Connexion √† MySQL
        print("üîå Connexion √† MySQL...")
        connection = mysql.connector.connect(
            host=host,
            user=user,
            password=password,
            port=port
        )
        
        if connection.is_connected():
            print("‚úÖ Connexion MySQL r√©ussie!")
            
            cursor = connection.cursor()
            
            # Cr√©er la base de donn√©es si elle n'existe pas
            print("üìä Cr√©ation de la base de donn√©es...")
            cursor.execute(f"CREATE DATABASE IF NOT EXISTS {database} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci")
            print(f"‚úÖ Base de donn√©es '{database}' cr√©√©e ou existante")
            
            # S√©lectionner la base de donn√©es
            cursor.execute(f"USE {database}")
            
            # Lire le fichier SQL
            sql_file = 'eazyskool_mysql.sql'
            if not os.path.exists(sql_file):
                print(f"‚ùå Fichier {sql_file} non trouv√©!")
                return False
            
            print(f"üìñ Lecture du fichier {sql_file}...")
            with open(sql_file, 'r', encoding='utf-8') as f:
                sql_script = f.read()
            
            # Ex√©cuter le script SQL
            print("üöÄ Ex√©cution du script SQL...")
            
            # Diviser le script en commandes individuelles
            commands = sql_script.split(';')
            
            for i, command in enumerate(commands):
                command = command.strip()
                if command and not command.startswith('--'):
                    try:
                        cursor.execute(command)
                        print(f"‚úÖ Commande {i+1} ex√©cut√©e")
                    except Error as e:
                        if "already exists" not in str(e).lower():
                            print(f"‚ö†Ô∏è Commande {i+1}: {e}")
            
            # Valider les changements
            connection.commit()
            print("‚úÖ Toutes les tables ont √©t√© cr√©√©es avec succ√®s!")
            
            # V√©rifier les tables cr√©√©es
            cursor.execute("SHOW TABLES")
            tables = cursor.fetchall()
            print(f"üìã Tables cr√©√©es ({len(tables)}):")
            for table in tables:
                print(f"   - {table[0]}")
            
            # V√©rifier les donn√©es
            cursor.execute("SELECT COUNT(*) FROM schools")
            school_count = cursor.fetchone()[0]
            print(f"üìö √âcoles: {school_count}")
            
            cursor.execute("SELECT COUNT(*) FROM cities")
            city_count = cursor.fetchone()[0]
            print(f"üèôÔ∏è Villes: {city_count}")
            
            cursor.execute("SELECT COUNT(*) FROM school_types")
            type_count = cursor.fetchone()[0]
            print(f"üéì Types d'√©coles: {type_count}")
            
            cursor.execute("SELECT COUNT(*) FROM specializations")
            spec_count = cursor.fetchone()[0]
            print(f"üéØ Sp√©cialisations: {spec_count}")
            
            cursor.execute("SELECT COUNT(*) FROM events")
            event_count = cursor.fetchone()[0]
            print(f"üìÖ √âv√©nements: {event_count}")
            
            cursor.close()
            connection.close()
            
            print("\nüéâ Import termin√© avec succ√®s!")
            print("üåê Acc√®s phpMyAdmin: http://localhost/phpmyadmin")
            print("üìä Base de donn√©es: eazyskool")
            
            return True
            
    except Error as e:
        print(f"‚ùå Erreur MySQL: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def test_connection_after_import():
    """Teste la connexion apr√®s l'import"""
    print("\nüîç Test de connexion apr√®s import...")
    
    try:
        from mysql_database_manager import test_mysql_connection
        if test_mysql_connection():
            print("‚úÖ Connexion r√©ussie apr√®s import!")
            return True
        else:
            print("‚ùå √âchec de la connexion apr√®s import")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de test: {e}")
        return False

if __name__ == "__main__":
    print("üéì EazySkool - Import des tables MySQL")
    print("=" * 50)
    
    # Importer les tables
    if import_mysql_tables():
        # Tester la connexion
        test_connection_after_import()
        
        print("\nüìã Prochaines √©tapes:")
        print("1. D√©marrer l'API: python mysql_api_server.py")
        print("2. Tester l'API: python test_mysql_api.py")
        print("3. Ouvrir phpMyAdmin: http://localhost/phpmyadmin")
        print("4. Acc√©der √† l'interface: index.html")
    else:
        print("\n‚ùå √âchec de l'import")
        print("üí° V√©rifiez que:")
        print("   - WampServer est d√©marr√©")
        print("   - MySQL est en cours d'ex√©cution")
        print("   - L'utilisateur 'root' a les permissions") 